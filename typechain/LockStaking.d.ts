/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LockStakingInterface extends ethers.utils.Interface {
  functions: {
    "SECONDS_PER_YEAR()": FunctionFragment;
    "addApyOnAmount(uint256,(uint256,uint256))": FunctionFragment;
    "addPool(tuple[])": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "getApy(tuple[],uint256)": FunctionFragment;
    "getApyOnAmountArr(uint256)": FunctionFragment;
    "getApyOnAmountArrMultiPool(uint256,uint256)": FunctionFragment;
    "getPools(uint256,uint256)": FunctionFragment;
    "inCaseTokenStuck(address,uint256,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "nextPoolId()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingInterest(uint256,address)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePool(uint256,(uint256,address,uint256,uint256,uint256,uint256,uint256,tuple[]))": FunctionFragment;
    "users(uint256,address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SECONDS_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addApyOnAmount",
    values: [BigNumberish, { amount: BigNumberish; apy: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [
      {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApy",
    values: [{ amount: BigNumberish; apy: BigNumberish }[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApyOnAmountArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApyOnAmountArrMultiPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inCaseTokenStuck",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nextPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingInterest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [
      BigNumberish,
      {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SECONDS_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addApyOnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getApy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApyOnAmountArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApyOnAmountArrMultiPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inCaseTokenStuck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextPoolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class LockStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LockStakingInterface;

  functions: {
    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    addApyOnAmount(
      poolId: BigNumberish,
      apyOnAmount: { amount: BigNumberish; apy: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPool(
      poolsInfo: {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApy(
      apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[],
      userAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApyOnAmountArr(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, BigNumber] & { amount: BigNumber; apy: BigNumber })[]]
    >;

    getApyOnAmountArrMultiPool(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, BigNumber] & { amount: BigNumber; apy: BigNumber })[][]]
    >;

    getPools(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & { amount: BigNumber; apy: BigNumber })[]
        ] & {
          id: BigNumber;
          token: string;
          endBlock: BigNumber;
          limit: BigNumber;
          limitPerUser: BigNumber;
          amount: BigNumber;
          timeLocking: BigNumber;
          apyOnAmountArr: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            apy: BigNumber;
          })[];
        })[]
      ]
    >;

    inCaseTokenStuck(
      token: string,
      balance: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextPoolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingInterest(
      id: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        token: string;
        endBlock: BigNumber;
        limit: BigNumber;
        limitPerUser: BigNumber;
        amount: BigNumber;
        timeLocking: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      id: BigNumberish,
      poolInfo: {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        firstTimeDeposit: BigNumber;
        expectedInterestEndStaking: BigNumber;
        lastTimeClaim: BigNumber;
        debt: BigNumber;
      }
    >;

    withdraw(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  addApyOnAmount(
    poolId: BigNumberish,
    apyOnAmount: { amount: BigNumberish; apy: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPool(
    poolsInfo: {
      id: BigNumberish;
      token: string;
      endBlock: BigNumberish;
      limit: BigNumberish;
      limitPerUser: BigNumberish;
      amount: BigNumberish;
      timeLocking: BigNumberish;
      apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApy(
    apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[],
    userAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApyOnAmountArr(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber] & { amount: BigNumber; apy: BigNumber })[]
  >;

  getApyOnAmountArrMultiPool(
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber] & { amount: BigNumber; apy: BigNumber })[][]
  >;

  getPools(
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & { amount: BigNumber; apy: BigNumber })[]
    ] & {
      id: BigNumber;
      token: string;
      endBlock: BigNumber;
      limit: BigNumber;
      limitPerUser: BigNumber;
      amount: BigNumber;
      timeLocking: BigNumber;
      apyOnAmountArr: ([BigNumber, BigNumber] & {
        amount: BigNumber;
        apy: BigNumber;
      })[];
    })[]
  >;

  inCaseTokenStuck(
    token: string,
    balance: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextPoolId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingInterest(
    id: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      token: string;
      endBlock: BigNumber;
      limit: BigNumber;
      limitPerUser: BigNumber;
      amount: BigNumber;
      timeLocking: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    id: BigNumberish,
    poolInfo: {
      id: BigNumberish;
      token: string;
      endBlock: BigNumberish;
      limit: BigNumberish;
      limitPerUser: BigNumberish;
      amount: BigNumberish;
      timeLocking: BigNumberish;
      apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      firstTimeDeposit: BigNumber;
      expectedInterestEndStaking: BigNumber;
      lastTimeClaim: BigNumber;
      debt: BigNumber;
    }
  >;

  withdraw(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    addApyOnAmount(
      poolId: BigNumberish,
      apyOnAmount: { amount: BigNumberish; apy: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    addPool(
      poolsInfo: {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    deposit(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApy(
      apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[],
      userAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApyOnAmountArr(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & { amount: BigNumber; apy: BigNumber })[]
    >;

    getApyOnAmountArrMultiPool(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & { amount: BigNumber; apy: BigNumber })[][]
    >;

    getPools(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber] & { amount: BigNumber; apy: BigNumber })[]
      ] & {
        id: BigNumber;
        token: string;
        endBlock: BigNumber;
        limit: BigNumber;
        limitPerUser: BigNumber;
        amount: BigNumber;
        timeLocking: BigNumber;
        apyOnAmountArr: ([BigNumber, BigNumber] & {
          amount: BigNumber;
          apy: BigNumber;
        })[];
      })[]
    >;

    inCaseTokenStuck(
      token: string,
      balance: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_rewardToken: string, overrides?: CallOverrides): Promise<void>;

    nextPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingInterest(
      id: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        token: string;
        endBlock: BigNumber;
        limit: BigNumber;
        limitPerUser: BigNumber;
        amount: BigNumber;
        timeLocking: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePool(
      id: BigNumberish,
      poolInfo: {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        firstTimeDeposit: BigNumber;
        expectedInterestEndStaking: BigNumber;
        lastTimeClaim: BigNumber;
        debt: BigNumber;
      }
    >;

    withdraw(id: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    addApyOnAmount(
      poolId: BigNumberish,
      apyOnAmount: { amount: BigNumberish; apy: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPool(
      poolsInfo: {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApy(
      apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[],
      userAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApyOnAmountArr(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApyOnAmountArrMultiPool(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPools(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inCaseTokenStuck(
      token: string,
      balance: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingInterest(
      id: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      id: BigNumberish,
      poolInfo: {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addApyOnAmount(
      poolId: BigNumberish,
      apyOnAmount: { amount: BigNumberish; apy: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPool(
      poolsInfo: {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApy(
      apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[],
      userAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApyOnAmountArr(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApyOnAmountArrMultiPool(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPools(
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inCaseTokenStuck(
      token: string,
      balance: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingInterest(
      id: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      id: BigNumberish,
      poolInfo: {
        id: BigNumberish;
        token: string;
        endBlock: BigNumberish;
        limit: BigNumberish;
        limitPerUser: BigNumberish;
        amount: BigNumberish;
        timeLocking: BigNumberish;
        apyOnAmountArr: { amount: BigNumberish; apy: BigNumberish }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
