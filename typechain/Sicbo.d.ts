/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SicboInterface extends ethers.utils.Interface {
  functions: {
    "amountBought(address)": FunctionFragment;
    "buyNft(uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "configSold(uint256,uint256,uint256)": FunctionFragment;
    "currentRoundIndex()": FunctionFragment;
    "devAccAmount()": FunctionFragment;
    "devAddress()": FunctionFragment;
    "endRound(uint256)": FunctionFragment;
    "fakeClaim(uint256)": FunctionFragment;
    "feePercent()": FunctionFragment;
    "gameToken()": FunctionFragment;
    "getCurrentTotalFeeAmount()": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "getRewardBetweenTwoRound(uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "maxAmountPerUser()": FunctionFragment;
    "nftHolders(address)": FunctionFragment;
    "nftPrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "play(bool,uint256)": FunctionFragment;
    "prices(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setFeePercent(uint256)": FunctionFragment;
    "setNftContract(address)": FunctionFragment;
    "setPrices(uint256[])": FunctionFragment;
    "sicboContract()": FunctionFragment;
    "soldAmount()": FunctionFragment;
    "soldLimit()": FunctionFragment;
    "tranferNftHolder(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vrfConsumer()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "amountBought",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "configSold",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devAccAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTotalFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRewardBetweenTwoRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAmountPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftHolders", values: [string]): string;
  encodeFunctionData(functionFragment: "nftPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sicboContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "soldAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "soldLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tranferNftHolder",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfConsumer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "amountBought",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devAccAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fakeClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTotalFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardBetweenTwoRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAmountPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftHolders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sicboContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "soldAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "soldLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tranferNftHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfConsumer",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "INO(address,uint256,uint256[])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Play(address,bool,uint256,uint256,bool)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "INO"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Play"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [string, BigNumber] & { user: string; reward: BigNumber }
>;

export type INOEvent = TypedEvent<
  [string, BigNumber, BigNumber[]] & {
    buyer: string;
    amount: BigNumber;
    tokenIds: BigNumber[];
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PlayEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber, boolean] & {
    buyer: string;
    predict: boolean;
    betAmount: BigNumber;
    reward: BigNumber;
    result: boolean;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class Sicbo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SicboInterface;

  functions: {
    amountBought(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyNft(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configSold(
      _maxPerUser: BigNumberish,
      _limit: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentRoundIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    devAccAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    endRound(
      holderReceivedPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fakeClaim(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    gameToken(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTotalFeeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReward(
      holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    getRewardBetweenTwoRound(
      depositRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _sicboContract: string,
      _vrfConsumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxAmountPerUser(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        depositRound: BigNumber;
        accuReward: BigNumber;
      }
    >;

    nftPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    play(
      predict: boolean,
      priceMark: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prices(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        holderReceiveAmountPerNft: BigNumber;
        totalFeeAmount: BigNumber;
      }
    >;

    setFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftContract(
      _sicboContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrices(
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sicboContract(overrides?: CallOverrides): Promise<[string]>;

    soldAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    soldLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    tranferNftHolder(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vrfConsumer(overrides?: CallOverrides): Promise<[string]>;
  };

  amountBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyNft(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configSold(
    _maxPerUser: BigNumberish,
    _limit: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentRoundIndex(overrides?: CallOverrides): Promise<BigNumber>;

  devAccAmount(overrides?: CallOverrides): Promise<BigNumber>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  endRound(
    holderReceivedPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fakeClaim(
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  gameToken(overrides?: CallOverrides): Promise<string>;

  getCurrentTotalFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRewardBetweenTwoRound(
    depositRound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _sicboContract: string,
    _vrfConsumer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxAmountPerUser(overrides?: CallOverrides): Promise<BigNumber>;

  nftHolders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      depositRound: BigNumber;
      accuReward: BigNumber;
    }
  >;

  nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  play(
    predict: boolean,
    priceMark: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prices(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      holderReceiveAmountPerNft: BigNumber;
      totalFeeAmount: BigNumber;
    }
  >;

  setFeePercent(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftContract(
    _sicboContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrices(
    _prices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sicboContract(overrides?: CallOverrides): Promise<string>;

  soldAmount(overrides?: CallOverrides): Promise<BigNumber>;

  soldLimit(overrides?: CallOverrides): Promise<BigNumber>;

  tranferNftHolder(
    from: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vrfConsumer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    amountBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyNft(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    configSold(
      _maxPerUser: BigNumberish,
      _limit: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentRoundIndex(overrides?: CallOverrides): Promise<BigNumber>;

    devAccAmount(overrides?: CallOverrides): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    endRound(
      holderReceivedPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fakeClaim(reward: BigNumberish, overrides?: CallOverrides): Promise<void>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    gameToken(overrides?: CallOverrides): Promise<string>;

    getCurrentTotalFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardBetweenTwoRound(
      depositRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _sicboContract: string,
      _vrfConsumer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxAmountPerUser(overrides?: CallOverrides): Promise<BigNumber>;

    nftHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        depositRound: BigNumber;
        accuReward: BigNumber;
      }
    >;

    nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    play(
      predict: boolean,
      priceMark: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    prices(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        holderReceiveAmountPerNft: BigNumber;
        totalFeeAmount: BigNumber;
      }
    >;

    setFeePercent(
      _feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftContract(
      _sicboContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sicboContract(overrides?: CallOverrides): Promise<string>;

    soldAmount(overrides?: CallOverrides): Promise<BigNumber>;

    soldLimit(overrides?: CallOverrides): Promise<BigNumber>;

    tranferNftHolder(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vrfConsumer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Claim(address,uint256)"(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    Claim(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    "INO(address,uint256,uint256[])"(
      buyer?: null,
      amount?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber[]],
      { buyer: string; amount: BigNumber; tokenIds: BigNumber[] }
    >;

    INO(
      buyer?: null,
      amount?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber[]],
      { buyer: string; amount: BigNumber; tokenIds: BigNumber[] }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Play(address,bool,uint256,uint256,bool)"(
      buyer?: string | null,
      predict?: null,
      betAmount?: null,
      reward?: null,
      result?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber, BigNumber, boolean],
      {
        buyer: string;
        predict: boolean;
        betAmount: BigNumber;
        reward: BigNumber;
        result: boolean;
      }
    >;

    Play(
      buyer?: string | null,
      predict?: null,
      betAmount?: null,
      reward?: null,
      result?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber, BigNumber, boolean],
      {
        buyer: string;
        predict: boolean;
        betAmount: BigNumber;
        reward: BigNumber;
        result: boolean;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    amountBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyNft(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configSold(
      _maxPerUser: BigNumberish,
      _limit: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentRoundIndex(overrides?: CallOverrides): Promise<BigNumber>;

    devAccAmount(overrides?: CallOverrides): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    endRound(
      holderReceivedPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fakeClaim(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    gameToken(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTotalFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardBetweenTwoRound(
      depositRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _sicboContract: string,
      _vrfConsumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxAmountPerUser(overrides?: CallOverrides): Promise<BigNumber>;

    nftHolders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      predict: boolean,
      priceMark: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prices(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftContract(
      _sicboContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrices(
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sicboContract(overrides?: CallOverrides): Promise<BigNumber>;

    soldAmount(overrides?: CallOverrides): Promise<BigNumber>;

    soldLimit(overrides?: CallOverrides): Promise<BigNumber>;

    tranferNftHolder(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vrfConsumer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    amountBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyNft(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configSold(
      _maxPerUser: BigNumberish,
      _limit: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentRoundIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devAccAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endRound(
      holderReceivedPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fakeClaim(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTotalFeeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardBetweenTwoRound(
      depositRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _sicboContract: string,
      _vrfConsumer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxAmountPerUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    play(
      predict: boolean,
      priceMark: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftContract(
      _sicboContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrices(
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sicboContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    soldAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    soldLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tranferNftHolder(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vrfConsumer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
